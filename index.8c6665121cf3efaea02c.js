!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){t.exports=r(1)},function(t,e,r){"use strict";r.r(e);var n={};r.r(n),r.d(n,"translatePoint",function(){return u}),r.d(n,"refineFloat",function(){return a});var o={};r.r(o),r.d(o,"length",function(){return c});var i={};function u(t,e){var r=t.getScreenCTM();if(!r)throw new Error("Should has screen CTM.");var n=t.createSVGPoint();return n.x=e.x,n.y=e.y,n.matrixTransform(r.inverse())}function a(t){return t+8-8}function c(){for(var t=0,e=1;e<arguments.length;e+=1){var r=e-1<0||arguments.length<=e-1?void 0:arguments[e-1],n=e<0||arguments.length<=e?void 0:arguments[e];t+=Math.sqrt(Math.pow(r.x-n.x,2)+Math.pow(r.y-n.y,2))}return t}function s(t,e){var r=t.w/2;if(!e)return{left:{x:t.x,y:t.y+r},right:{x:t.x,y:t.y-r}};var n=Math.atan((t.y-e.y)/(t.x-e.x)),o=a(Math.sin(n)*r),i=a(Math.cos(n)*r);return{left:{x:t.x-o,y:t.y+i},right:{x:t.x+o,y:t.y-i}}}function l(){for(var t=["M"],e=[],r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];for(var i=0;i<n.length;i+=1){var u=s(n[i],n[i-1]||n[i+1]),a=u.left,l=u.right,f=e.slice(i)[0];f&&c(f,a)>c(f,l)?e.splice(i,0,a,l):e.splice(i,0,l,a)}for(var p=0,h=e;p<h.length;p++){var y=h[p];t.push("".concat(y.x,",").concat(y.y))}return{d:t.join(" ")}}function f(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function h(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?p(r,!0).forEach(function(e){y(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):p(r).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}function y(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function v(){var t,e=[];if(0===arguments.length)return[];e.push(h({},arguments.length<=0?void 0:arguments[0]));for(var r=0;r<arguments.length-1;r++){var n=r<0||arguments.length<=r?void 0:arguments[r],o=r+1<0||arguments.length<=r+1?void 0:arguments[r+1];e.push({x:.75*n.x+.25*o.x,y:.75*n.y+.25*o.y,w:.75*n.w+.25*o.w},{x:.25*n.x+.75*o.x,y:.25*n.y+.75*o.y,w:.25*n.w+.75*o.w})}arguments.length>2&&e.push(h({},(t=arguments.length-1)<0||arguments.length<=t?void 0:arguments[t]));return e}function d(t){for(var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=t,n=0;n<e;n+=1)r=v.apply(void 0,f(r));return r}function g(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function b(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,n)}return r}function w(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function m(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}r.r(i),r.d(i,"util",function(){return n}),r.d(i,"vector2",function(){return o}),r.d(i,"computeSidePoints",function(){return s}),r.d(i,"compute",function(){return l}),r.d(i,"smoothOnce",function(){return v}),r.d(i,"smooth",function(){return d});var O=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.isDrawing=!1,this.points=[],this.width=20,this.el=e}var e,r,u;return e=t,(r=[{key:"onPointerdown",value:function(t){t.preventDefault(),this.isDrawing=!0,this.points=[];var e=document.createElementNS("http://www.w3.org/2000/svg","path");this.el.appendChild(e),this.target=e}},{key:"onPointermove",value:function(t){var e=this;if(this.isDrawing&&(t.preventDefault(),!(this.lastDrawTime&&Date.now()-this.lastDrawTime<4))){this.lastDrawTime=Date.now();var r=n.translatePoint(this.el,t),i={x:r.x,y:r.y,w:t.pressure*this.width},u=this.points.slice(-1)[0];u&&o.length(u,i)<this.width||(this.points.push(i),"mouse"===t.pointerType&&(this.points=this.points.map(function(t,r,n){return function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?b(r,!0).forEach(function(e){w(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):b(r).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}({},t,{w:e.width*(r/n.length)})})),this.update())}}},{key:"onPointerup",value:function(t){t.preventDefault(),this.isDrawing=!1,delete this.target}},{key:"install",value:function(){this.el.addEventListener("pointerdown",this.onPointerdown.bind(this)),this.el.addEventListener("pointermove",this.onPointermove.bind(this)),this.el.addEventListener("pointerup",this.onPointerup.bind(this))}},{key:"update",value:function(){var t=l.apply(i,g(d(this.points,4))).d;this.mustTarget.setAttribute("d",t)}},{key:"mustTarget",get:function(){if(!this.target)throw new Error("Should has target");return this.target}}])&&m(e.prototype,r),u&&m(e,u),t}();!function(){var t=document.querySelector("svg#canvas");if(!(t instanceof SVGSVGElement))throw Error("Missing canvas element");new O(t).install(),t.addEventListener("pointermove",function(t){var e=document.querySelector("#pressure");e&&(e.textContent=t.pressure.toString())}),t.addEventListener("pointermove",function(t){var e=document.querySelector("#pointer-type");e&&(e.textContent=t.pointerType)})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzL3RyYW5zbGF0ZVBvaW50LnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9yZWZpbmVGbG9hdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmVjdG9yMi9sZW5ndGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXB1dGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Ntb290aC50cyIsIndlYnBhY2s6Ly8vLi9kZW1vL2luZGV4LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwidHJhbnNsYXRlUG9pbnQiLCJlbCIsInBvaW50IiwibWF0cml4IiwiZ2V0U2NyZWVuQ1RNIiwiRXJyb3IiLCJjcmVhdGVTVkdQb2ludCIsIngiLCJ5IiwibWF0cml4VHJhbnNmb3JtIiwiaW52ZXJzZSIsInJlZmluZUZsb2F0IiwidiIsInJldCIsImxlbmd0aCIsInBhIiwicGIiLCJNYXRoIiwic3FydCIsInBvdyIsImNvbXB1dGVTaWRlUG9pbnRzIiwiY3VycmVudCIsInByZXYiLCJ3IiwibGVmdCIsInJpZ2h0IiwiYW5nbGUiLCJhdGFuIiwiZHgiLCJzaW4iLCJkeSIsImNvcyIsImNvbXB1dGUiLCJvcGVyYXRpb25zIiwiZWRnZVBvaW50cyIsInBvaW50cyIsImxhc3RMZWZ0Iiwic2xpY2UiLCJzcGxpY2UiLCJwdXNoIiwiam9pbiIsInNtb290aE9uY2UiLCJwMCIsInAxIiwic21vb3RoIiwidGltZXMiLCJjb3VudCIsImlzRHJhd2luZyIsIndpZHRoIiwidGhpcyIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInRhcmdldCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwiYXBwZW5kQ2hpbGQiLCJsYXN0RHJhd1RpbWUiLCJEYXRlIiwibm93IiwicHJlc3N1cmUiLCJsYXN0UG9pbnQiLCJwb2ludGVyVHlwZSIsIm1hcCIsImFycmF5IiwidXBkYXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uUG9pbnRlcmRvd24iLCJvblBvaW50ZXJtb3ZlIiwib25Qb2ludGVydXAiLCJtdXN0VGFyZ2V0Iiwic2V0QXR0cmlidXRlIiwicXVlcnlTZWxlY3RvciIsIlNWR1NWR0VsZW1lbnQiLCJpbnN0YWxsIiwidGV4dENvbnRlbnQiLCJ0b1N0cmluZyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFP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MDJjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDApO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZVBvaW50KFxuICBlbDogU1ZHU1ZHRWxlbWVudCxcbiAgcG9pbnQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfVxuKTogRE9NUG9pbnQge1xuICBjb25zdCBtYXRyaXggPSBlbC5nZXRTY3JlZW5DVE0oKTtcblxuICBpZiAoIW1hdHJpeCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2hvdWxkIGhhcyBzY3JlZW4gQ1RNLicpO1xuICB9XG4gIGNvbnN0IHAgPSBlbC5jcmVhdGVTVkdQb2ludCgpO1xuICBwLnggPSBwb2ludC54O1xuICBwLnkgPSBwb2ludC55O1xuICByZXR1cm4gcC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4LmludmVyc2UoKSk7XG59XG4iLCIvKiogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQzNTUwMjY4ICovXG5leHBvcnQgZnVuY3Rpb24gcmVmaW5lRmxvYXQodjogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIHYgKyA4IC0gODtcbn1cbiIsImltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKiBMZW5ndGggYmV0d2VlbiBwb2ludHMgKi9cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoLi4ucG9pbnRzOiBWZWN0b3IyW10pOiBudW1iZXIge1xuICBsZXQgcmV0ID0gMDtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBwYSA9IHBvaW50c1tpIC0gMV07XG4gICAgY29uc3QgcGIgPSBwb2ludHNbaV07XG4gICAgcmV0ICs9IE1hdGguc3FydChNYXRoLnBvdyhwYS54IC0gcGIueCwgMikgKyBNYXRoLnBvdyhwYS55IC0gcGIueSwgMikpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJpbXBvcnQgeyBQb2ludCwgVmVjdG9yMiB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgcmVmaW5lRmxvYXQgfSBmcm9tICcuL3V0aWxzL3JlZmluZUZsb2F0JztcbmltcG9ydCAqIGFzIHZlY3RvcjIgZnJvbSAnLi92ZWN0b3IyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVTaWRlUG9pbnRzKFxuICBjdXJyZW50OiBQb2ludCxcbiAgcHJldj86IFBvaW50XG4pOiB7IGxlZnQ6IFZlY3RvcjI7IHJpZ2h0OiBWZWN0b3IyIH0ge1xuICBjb25zdCByID0gY3VycmVudC53IC8gMjtcbiAgaWYgKCFwcmV2KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IHtcbiAgICAgICAgeDogY3VycmVudC54LFxuICAgICAgICB5OiBjdXJyZW50LnkgKyByLFxuICAgICAgfSxcbiAgICAgIHJpZ2h0OiB7XG4gICAgICAgIHg6IGN1cnJlbnQueCxcbiAgICAgICAgeTogY3VycmVudC55IC0gcixcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbigoY3VycmVudC55IC0gcHJldi55KSAvIChjdXJyZW50LnggLSBwcmV2LngpKTtcbiAgY29uc3QgZHggPSByZWZpbmVGbG9hdChNYXRoLnNpbihhbmdsZSkgKiByKTtcbiAgY29uc3QgZHkgPSByZWZpbmVGbG9hdChNYXRoLmNvcyhhbmdsZSkgKiByKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiB7XG4gICAgICB4OiBjdXJyZW50LnggLSBkeCxcbiAgICAgIHk6IGN1cnJlbnQueSArIGR5LFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHg6IGN1cnJlbnQueCArIGR4LFxuICAgICAgeTogY3VycmVudC55IC0gZHksXG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGUoLi4ucG9pbnRzOiBQb2ludFtdKTogeyBkOiBzdHJpbmcgfSB7XG4gIGNvbnN0IG9wZXJhdGlvbnM6IHN0cmluZ1tdID0gWydNJ107XG4gIGNvbnN0IGVkZ2VQb2ludHM6IFZlY3RvcjJbXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHsgbGVmdCwgcmlnaHQgfSA9IGNvbXB1dGVTaWRlUG9pbnRzKFxuICAgICAgcG9pbnRzW2ldLFxuICAgICAgcG9pbnRzW2kgLSAxXSB8fCBwb2ludHNbaSArIDFdXG4gICAgKTtcbiAgICBjb25zdCBsYXN0TGVmdCA9IGVkZ2VQb2ludHMuc2xpY2UoaSlbMF07XG4gICAgaWYgKFxuICAgICAgbGFzdExlZnQgJiZcbiAgICAgIHZlY3RvcjIubGVuZ3RoKGxhc3RMZWZ0LCBsZWZ0KSA+IHZlY3RvcjIubGVuZ3RoKGxhc3RMZWZ0LCByaWdodClcbiAgICApIHtcbiAgICAgIGVkZ2VQb2ludHMuc3BsaWNlKGksIDAsIGxlZnQsIHJpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRnZVBvaW50cy5zcGxpY2UoaSwgMCwgcmlnaHQsIGxlZnQpO1xuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IHAgb2YgZWRnZVBvaW50cykge1xuICAgIG9wZXJhdGlvbnMucHVzaChgJHtwLnh9LCR7cC55fWApO1xuICB9XG4gIGNvbnN0IGQgPSBvcGVyYXRpb25zLmpvaW4oJyAnKTtcbiAgcmV0dXJuIHsgZCB9O1xufVxuIiwiaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL3R5cGVzJztcblxuLy8gUmVmZXI6IGh0dHBzOi8vZ2l0aHViLmNvbS9KYW0zL2NoYWlraW4tc21vb3RoL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG5cbmV4cG9ydCBmdW5jdGlvbiBzbW9vdGhPbmNlKC4uLnBvaW50czogUG9pbnRbXSk6IFBvaW50W10ge1xuICBjb25zdCByZXQ6IFBvaW50W10gPSBbXTtcbiAgaWYgKHBvaW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0LnB1c2goeyAuLi5wb2ludHNbMF0gfSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGNvbnN0IHAwID0gcG9pbnRzW2ldO1xuICAgIGNvbnN0IHAxID0gcG9pbnRzW2kgKyAxXTtcblxuICAgIHJldC5wdXNoKFxuICAgICAge1xuICAgICAgICB4OiAwLjc1ICogcDAueCArIDAuMjUgKiBwMS54LFxuICAgICAgICB5OiAwLjc1ICogcDAueSArIDAuMjUgKiBwMS55LFxuICAgICAgICB3OiBwMC53ICogMC43NSArIHAxLncgKiAwLjI1LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgeDogMC4yNSAqIHAwLnggKyAwLjc1ICogcDEueCxcbiAgICAgICAgeTogMC4yNSAqIHAwLnkgKyAwLjc1ICogcDEueSxcbiAgICAgICAgdzogcDAudyAqIDAuMjUgKyBwMS53ICogMC43NSxcbiAgICAgIH1cbiAgICApO1xuICB9XG4gIGlmIChwb2ludHMubGVuZ3RoID4gMikge1xuICAgIHJldC5wdXNoKHsgLi4ucG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSB9KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc21vb3RoKHBvaW50czogUG9pbnRbXSwgdGltZXMgPSAxKTogUG9pbnRbXSB7XG4gIGxldCByZXQgPSBwb2ludHM7XG4gIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCB0aW1lczsgY291bnQgKz0gMSkge1xuICAgIHJldCA9IHNtb290aE9uY2UoLi4ucmV0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiaW1wb3J0ICogYXMgc3ZnVmFyaWFibGVXaWR0aExpbmUgZnJvbSAnQCc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJ0AnO1xuXG5jbGFzcyBEcmF3aW5nSGFuZGxlciB7XG4gIHB1YmxpYyBlbDogU1ZHU1ZHRWxlbWVudDtcbiAgcHVibGljIGlzRHJhd2luZyA9IGZhbHNlO1xuICBwdWJsaWMgcG9pbnRzOiBzdmdWYXJpYWJsZVdpZHRoTGluZS5Qb2ludFtdID0gW107XG4gIHB1YmxpYyB0YXJnZXQ/OiBTVkdQYXRoRWxlbWVudDtcbiAgcHVibGljIHdpZHRoID0gMjA7XG4gIHB1YmxpYyBsYXN0RHJhd1RpbWU/OiBudW1iZXI7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKGVsOiBTVkdTVkdFbGVtZW50KSB7XG4gICAgdGhpcy5lbCA9IGVsO1xuICB9XG4gIG9uUG9pbnRlcmRvd24oZTogUG9pbnRlckV2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuaXNEcmF3aW5nID0gdHJ1ZTtcbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgIGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gICAgICAncGF0aCdcbiAgICApO1xuICAgIHRoaXMuZWwuYXBwZW5kQ2hpbGQodGFyZ2V0KTtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgfVxuICBnZXQgbXVzdFRhcmdldCgpOiBTVkdQYXRoRWxlbWVudCB7XG4gICAgaWYgKCF0aGlzLnRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaG91bGQgaGFzIHRhcmdldCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50YXJnZXQ7XG4gIH1cbiAgb25Qb2ludGVybW92ZShlOiBQb2ludGVyRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNEcmF3aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy5sYXN0RHJhd1RpbWUgJiYgRGF0ZS5ub3coKSAtIHRoaXMubGFzdERyYXdUaW1lIDwgNCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmxhc3REcmF3VGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgeyB4LCB5IH0gPSBzdmdWYXJpYWJsZVdpZHRoTGluZS51dGlsLnRyYW5zbGF0ZVBvaW50KHRoaXMuZWwsIGUpO1xuICAgIGNvbnN0IHcgPSBlLnByZXNzdXJlICogdGhpcy53aWR0aDtcbiAgICBjb25zdCBwOiBQb2ludCA9IHsgeCwgeSwgdyB9O1xuICAgIGNvbnN0IGxhc3RQb2ludCA9IHRoaXMucG9pbnRzLnNsaWNlKC0xKVswXTtcbiAgICBpZiAoXG4gICAgICBsYXN0UG9pbnQgJiZcbiAgICAgIHN2Z1ZhcmlhYmxlV2lkdGhMaW5lLnZlY3RvcjIubGVuZ3RoKGxhc3RQb2ludCwgcCkgPCB0aGlzLndpZHRoXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucG9pbnRzLnB1c2gocCk7XG4gICAgaWYgKGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHtcbiAgICAgIHRoaXMucG9pbnRzID0gdGhpcy5wb2ludHMubWFwKCh2LCBpLCBhcnJheSkgPT4gKHtcbiAgICAgICAgLi4udixcbiAgICAgICAgdzogdGhpcy53aWR0aCAqIChpIC8gYXJyYXkubGVuZ3RoKSxcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuICBvblBvaW50ZXJ1cChlOiBQb2ludGVyRXZlbnQpOiB2b2lkIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5pc0RyYXdpbmcgPSBmYWxzZTtcbiAgICBkZWxldGUgdGhpcy50YXJnZXQ7XG4gIH1cbiAgaW5zdGFsbCgpOiB2b2lkIHtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5vblBvaW50ZXJkb3duLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLm9uUG9pbnRlcm1vdmUuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLm9uUG9pbnRlcnVwLmJpbmQodGhpcykpO1xuICB9XG4gIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBjb25zdCB7IGQgfSA9IHN2Z1ZhcmlhYmxlV2lkdGhMaW5lLmNvbXB1dGUoXG4gICAgICAuLi5zdmdWYXJpYWJsZVdpZHRoTGluZS5zbW9vdGgodGhpcy5wb2ludHMsIDQpXG4gICAgKTtcbiAgICB0aGlzLm11c3RUYXJnZXQuc2V0QXR0cmlidXRlKCdkJywgZCk7XG4gIH1cbn1cblxuKCgpOiB2b2lkID0+IHtcbiAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdmcjY2FudmFzJyk7XG4gIGlmICghKGVsIGluc3RhbmNlb2YgU1ZHU1ZHRWxlbWVudCkpIHtcbiAgICB0aHJvdyBFcnJvcignTWlzc2luZyBjYW52YXMgZWxlbWVudCcpO1xuICB9XG4gIG5ldyBEcmF3aW5nSGFuZGxlcihlbCkuaW5zdGFsbCgpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIGUgPT4ge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3ByZXNzdXJlJyk7XG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbC50ZXh0Q29udGVudCA9IGUucHJlc3N1cmUudG9TdHJpbmcoKTtcbiAgfSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgZSA9PiB7XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcG9pbnRlci10eXBlJyk7XG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbC50ZXh0Q29udGVudCA9IGUucG9pbnRlclR5cGU7XG4gIH0pO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=