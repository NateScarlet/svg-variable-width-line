!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e,r){"use strict";r.r(e);var n=r(6);r.d(e,"util",(function(){return n}));var o=r(2);r.d(e,"vector2",(function(){return o}));var i=r(3);r.d(e,"computeSidePoints",(function(){return i.b})),r.d(e,"compute",(function(){return i.a}));var u=r(4);for(var a in u)["default","util","vector2","computeSidePoints","compute"].indexOf(a)<0&&function(t){r.d(e,t,(function(){return u[t]}))}(a);var c=r(5);r.d(e,"smoothOnce",(function(){return c.b})),r.d(e,"smooth",(function(){return c.a}))},function(t,e,r){"use strict";function n(t){return t+8-8}r.d(e,"a",(function(){return n}))},function(t,e,r){"use strict";function n(){for(var t=0,e=1;e<arguments.length;e+=1){var r=e-1<0||arguments.length<=e-1?void 0:arguments[e-1],n=e<0||arguments.length<=e?void 0:arguments[e];t+=Math.sqrt(Math.pow(r.x-n.x,2)+Math.pow(r.y-n.y,2))}return t}r.r(e),r.d(e,"length",(function(){return n}))},function(t,e,r){"use strict";r.d(e,"b",(function(){return i})),r.d(e,"a",(function(){return u}));var n=r(1),o=r(2);function i(t,e){var r=t.w/2;if(!e)return{left:{x:t.x,y:t.y+r},right:{x:t.x,y:t.y-r}};var o=Math.atan((t.y-e.y)/(t.x-e.x)),i=Object(n.a)(Math.sin(o)*r),u=Object(n.a)(Math.cos(o)*r);return{left:{x:t.x-i,y:t.y+u},right:{x:t.x+i,y:t.y-u}}}function u(){for(var t=["M"],e=[],r=arguments.length,n=new Array(r),u=0;u<r;u++)n[u]=arguments[u];for(var a=0;a<n.length;a+=1){var c=i(n[a],n[a-1]||n[a+1]),f=c.left,l=c.right,s=e.slice(a)[0];s&&o.length(s,f)>o.length(s,l)?e.splice(a,0,f,l):e.splice(a,0,l,f)}for(var p=0,y=e;p<y.length;p++){var v=y[p];t.push("".concat(v.x,",").concat(v.y))}var h=t.join(" ");return{d:h}}},function(t,e){},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t){return function(t){if(Array.isArray(t))return i(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function u(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?u(Object(r),!0).forEach((function(e){c(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function c(t,e,r){var o;return o=function(t,e){if("object"!=n(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,e||"default");if("object"!=n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(e,"string"),(e="symbol"==n(o)?o:o+"")in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function f(){var t,e=[];if(0===arguments.length)return[];e.push(a({},arguments.length<=0?void 0:arguments[0]));for(var r=0;r<arguments.length-1;r++){var n=r<0||arguments.length<=r?void 0:arguments[r],o=r+1<0||arguments.length<=r+1?void 0:arguments[r+1];e.push({x:.75*n.x+.25*o.x,y:.75*n.y+.25*o.y,w:.75*n.w+.25*o.w},{x:.25*n.x+.75*o.x,y:.25*n.y+.75*o.y,w:.25*n.w+.75*o.w})}arguments.length>2&&e.push(a({},(t=arguments.length-1)<0||arguments.length<=t?void 0:arguments[t]));return e}function l(t){for(var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=t,n=0;n<e;n+=1)r=f.apply(void 0,o(r));return r}r.d(e,"b",(function(){return f})),r.d(e,"a",(function(){return l}))},function(t,e,r){"use strict";function n(t,e){var r=t.getScreenCTM();if(!r)throw new Error("Should has screen CTM.");var n=t.createSVGPoint();return n.x=e.x,n.y=e.y,n.matrixTransform(r.inverse())}r.r(e),r.d(e,"translatePoint",(function(){return n})),r.d(e,"refineFloat",(function(){return o.a}));var o=r(1)},function(t,e,r){t.exports=r(8)},function(t,e,r){"use strict";r.r(e);var n=r(0);function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t){return function(t){if(Array.isArray(t))return u(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return u(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return u(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){f(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function f(t,e,r){return(e=s(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,s(n.key),n)}}function s(t){var e=function(t,e){if("object"!=o(t)||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!=o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==o(e)?e:e+""}var p=function(){return t=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.isDrawing=!1,this.points=[],this.width=20,this.el=e},(e=[{key:"onPointerdown",value:function(t){t.preventDefault(),this.isDrawing=!0,this.points=[];var e=document.createElementNS("http://www.w3.org/2000/svg","path");this.el.appendChild(e),this.target=e}},{key:"mustTarget",get:function(){if(!this.target)throw new Error("Should has target");return this.target}},{key:"onPointermove",value:function(t){var e=this;if(this.isDrawing&&(t.preventDefault(),!(this.lastDrawTime&&Date.now()-this.lastDrawTime<4))){this.lastDrawTime=Date.now();var r=n.util.translatePoint(this.el,t),o={x:r.x,y:r.y,w:t.pressure*this.width},i=this.points.slice(-1)[0];i&&n.vector2.length(i,o)<this.width||(this.points.push(o),"mouse"===t.pointerType&&(this.points=this.points.map((function(t,r,n){return c(c({},t),{},{w:e.width*(r/n.length)})}))),this.update())}}},{key:"onPointerup",value:function(t){t.preventDefault(),this.isDrawing=!1,delete this.target}},{key:"install",value:function(){this.el.addEventListener("pointerdown",this.onPointerdown.bind(this)),this.el.addEventListener("pointermove",this.onPointermove.bind(this)),this.el.addEventListener("pointerup",this.onPointerup.bind(this))}},{key:"update",value:function(){var t=n.compute.apply(n,i(n.smooth(this.points,4))).d;this.mustTarget.setAttribute("d",t)}}])&&l(t.prototype,e),r&&l(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t;var t,e,r}();!function(){var t=document.querySelector("svg#canvas");if(!(t instanceof SVGSVGElement))throw Error("Missing canvas element");new p(t).install(),t.addEventListener("pointermove",(function(t){var e=document.querySelector("#pressure");e&&(e.textContent=t.pressure.toString())})),t.addEventListener("pointermove",(function(t){var e=document.querySelector("#pointer-type");e&&(e.textContent=t.pointerType)}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9yZWZpbmVGbG9hdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmVjdG9yMi9sZW5ndGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXB1dGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Ntb290aC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdHJhbnNsYXRlUG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vZGVtby9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJlZmluZUZsb2F0IiwidiIsImxlbmd0aCIsInJldCIsImFyZ3VtZW50cyIsInBhIiwidW5kZWZpbmVkIiwicGIiLCJNYXRoIiwic3FydCIsInBvdyIsIngiLCJ5IiwiY29tcHV0ZVNpZGVQb2ludHMiLCJjdXJyZW50IiwicHJldiIsInciLCJsZWZ0IiwicmlnaHQiLCJhbmdsZSIsImF0YW4iLCJkeCIsInNpbiIsImR5IiwiY29zIiwiY29tcHV0ZSIsIm9wZXJhdGlvbnMiLCJlZGdlUG9pbnRzIiwiX2xlbiIsInBvaW50cyIsIkFycmF5IiwiX2tleSIsIl9jb21wdXRlU2lkZVBvaW50cyIsImxhc3RMZWZ0Iiwic2xpY2UiLCJ2ZWN0b3IyIiwic3BsaWNlIiwiX2kiLCJfZWRnZVBvaW50cyIsInB1c2giLCJjb25jYXQiLCJqb2luIiwic21vb3RoT25jZSIsIl9yZWYiLCJfb2JqZWN0U3ByZWFkIiwicDAiLCJwMSIsInNtb290aCIsInRpbWVzIiwiY291bnQiLCJhcHBseSIsIl90b0NvbnN1bWFibGVBcnJheSIsInRyYW5zbGF0ZVBvaW50IiwiZWwiLCJwb2ludCIsIm1hdHJpeCIsImdldFNjcmVlbkNUTSIsIkVycm9yIiwiY3JlYXRlU1ZHUG9pbnQiLCJtYXRyaXhUcmFuc2Zvcm0iLCJpbnZlcnNlIiwiRHJhd2luZ0hhbmRsZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJpc0RyYXdpbmciLCJ3aWR0aCIsInRoaXMiLCJlIiwicHJldmVudERlZmF1bHQiLCJ0YXJnZXQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImFwcGVuZENoaWxkIiwiX3RoaXMiLCJsYXN0RHJhd1RpbWUiLCJEYXRlIiwibm93IiwiX3N2Z1ZhcmlhYmxlV2lkdGhMaW5lIiwic3ZnVmFyaWFibGVXaWR0aExpbmUiLCJwcmVzc3VyZSIsImxhc3RQb2ludCIsInBvaW50ZXJUeXBlIiwibWFwIiwiYXJyYXkiLCJ1cGRhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwib25Qb2ludGVyZG93biIsIm9uUG9pbnRlcm1vdmUiLCJvblBvaW50ZXJ1cCIsIm11c3RUYXJnZXQiLCJzZXRBdHRyaWJ1dGUiLCJxdWVyeVNlbGVjdG9yIiwiU1ZHU1ZHRWxlbWVudCIsImluc3RhbGwiLCJ0ZXh0Q29udGVudCIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FGQTFCLEVBQW9Ca0IsRUFBRU8sR0FDdEJYLE9BQU9DLGVBQWVVLEVBQUksVUFBVyxDQUFFVCxZQUFZLEVBQU1LLE1BQU9BLElBQ3RELEVBQVBFLEdBQTRCLGlCQUFURixFQUFtQixJQUFJLElBQUlNLEtBQU9OLEVBQU9yQixFQUFvQlUsRUFBRWUsRUFBSUUsRUFBSyxTQUFTQSxHQUFPLE9BQU9OLEVBQU1NLElBQVFDLEtBQUssS0FBTUQsSUFDOUksT0FBT0YsR0FJUnpCLEVBQW9CNkIsRUFBSSxTQUFTMUIsR0FDaEMsSUFBSVMsRUFBU1QsR0FBVUEsRUFBT3FCLFdBQzdCLFdBQXdCLE9BQU9yQixFQUFnQixTQUMvQyxXQUE4QixPQUFPQSxHQUV0QyxPQURBSCxFQUFvQlUsRUFBRUUsRUFBUSxJQUFLQSxHQUM1QkEsR0FJUlosRUFBb0JhLEVBQUksU0FBU2lCLEVBQVFDLEdBQVksT0FBT2pCLE9BQU9rQixVQUFVQyxlQUFlMUIsS0FBS3VCLEVBQVFDLElBR3pHL0IsRUFBb0JrQyxFQUFJLEdBSWpCbEMsRUFBb0JBLEVBQW9CbUMsRUFBSSxHLCtCQ2xGckQsMmMsNkJDQ00sU0FBVUMsRUFBWUMsR0FDMUIsT0FBT0EsRUFBSSxFQUFJLEVBRmpCLG1DLDZCQ0dNLFNBQVVDLElBRWQsSUFEQSxJQUFJQyxFQUFNLEVBQ0RuQyxFQUFJLEVBQUdBLEVBQUlvQyxVQUFPRixPQUFRbEMsR0FBSyxFQUFHLENBQ3pDLElBQU1xQyxFQUFZckMsRUFBSSxFQUFDLEdBQUFvQyxVQUFBRixRQUFMbEMsRUFBSSxPQUFDc0MsRUFBQUYsVUFBTHBDLEVBQUksR0FDaEJ1QyxFQUFZdkMsRUFBQyxHQUFBb0MsVUFBQUYsUUFBRGxDLE9BQUNzQyxFQUFBRixVQUFEcEMsR0FDbEJtQyxHQUFPSyxLQUFLQyxLQUFLRCxLQUFLRSxJQUFJTCxFQUFHTSxFQUFJSixFQUFHSSxFQUFHLEdBQUtILEtBQUtFLElBQUlMLEVBQUdPLEVBQUlMLEVBQUdLLEVBQUcsSUFFcEUsT0FBT1QsRSw0RUNUVCxzRkFHTSxTQUFVVSxFQUNkQyxFQUNBQyxHQUVBLElBQU1qQyxFQUFJZ0MsRUFBUUUsRUFBSSxFQUN0QixJQUFLRCxFQUNILE1BQU8sQ0FDTEUsS0FBTSxDQUNKTixFQUFHRyxFQUFRSCxFQUNYQyxFQUFHRSxFQUFRRixFQUFJOUIsR0FFakJvQyxNQUFPLENBQ0xQLEVBQUdHLEVBQVFILEVBQ1hDLEVBQUdFLEVBQVFGLEVBQUk5QixJQUlyQixJQUFNcUMsRUFBUVgsS0FBS1ksTUFBTU4sRUFBUUYsRUFBSUcsRUFBS0gsSUFBTUUsRUFBUUgsRUFBSUksRUFBS0osSUFDM0RVLEVBQUtyQixZQUFZUSxLQUFLYyxJQUFJSCxHQUFTckMsR0FDbkN5QyxFQUFLdkIsWUFBWVEsS0FBS2dCLElBQUlMLEdBQVNyQyxHQUN6QyxNQUFPLENBQ0xtQyxLQUFNLENBQ0pOLEVBQUdHLEVBQVFILEVBQUlVLEVBQ2ZULEVBQUdFLEVBQVFGLEVBQUlXLEdBRWpCTCxNQUFPLENBQ0xQLEVBQUdHLEVBQVFILEVBQUlVLEVBQ2ZULEVBQUdFLEVBQVFGLEVBQUlXLElBS2YsU0FBVUUsSUFFbUIsSUFEakMsSUFBTUMsRUFBdUIsQ0FBQyxLQUN4QkMsRUFBd0IsR0FBR0MsRUFBQXhCLFVBQUFGLE9BRlIyQixFQUFlLElBQUFDLE1BQUFGLEdBQUFHLEVBQUEsRUFBQUEsRUFBQUgsRUFBQUcsSUFBZkYsRUFBZUUsR0FBQTNCLFVBQUEyQixHQUd4QyxJQUFLLElBQUkvRCxFQUFJLEVBQUdBLEVBQUk2RCxFQUFPM0IsT0FBUWxDLEdBQUssRUFBRyxDQUN6QyxJQUFBZ0UsRUFBd0JuQixFQUN0QmdCLEVBQU83RCxHQUNQNkQsRUFBTzdELEVBQUksSUFBTTZELEVBQU83RCxFQUFJLElBRnRCaUQsRUFBSWUsRUFBSmYsS0FBTUMsRUFBS2MsRUFBTGQsTUFJUmUsRUFBV04sRUFBV08sTUFBTWxFLEdBQUcsR0FFbkNpRSxHQUNBRSxTQUFlRixFQUFVaEIsR0FBUWtCLFNBQWVGLEVBQVVmLEdBRTFEUyxFQUFXUyxPQUFPcEUsRUFBRyxFQUFHaUQsRUFBTUMsR0FFOUJTLEVBQVdTLE9BQU9wRSxFQUFHLEVBQUdrRCxFQUFPRCxHQUduQyxJQUFLLElBQUxvQixFQUFBLEVBQUFDLEVBQWdCWCxFQUFVVSxFQUFBQyxFQUFBcEMsT0FBQW1DLElBQUUsQ0FBdkIsSUFBTXZDLEVBQUN3QyxFQUFBRCxHQUNWWCxFQUFXYSxLQUFLLEdBQURDLE9BQUkxQyxFQUFFYSxFQUFDLEtBQUE2QixPQUFJMUMsRUFBRWMsSUFFOUIsSUFBTXRDLEVBQUlvRCxFQUFXZSxLQUFLLEtBQzFCLE1BQU8sQ0FBRW5FLE8sNCtEQ3RETCxTQUFVb0UsSUFDZCxJQXNCdUJDLEVBdEJqQnhDLEVBQWUsR0FDckIsR0FBc0IsSUFBbEJDLFVBQU9GLE9BQ1QsTUFBTyxHQUVUQyxFQUFJb0MsS0FBSUssRUFBQyxHQUFEeEMsVUFBQUYsUUFBQSxPQUFBSSxFQUFBRixVQUFBLEtBQ1IsSUFBSyxJQUFJcEMsRUFBSSxFQUFHQSxFQUFJb0MsVUFBT0YsT0FBUyxFQUFHbEMsSUFBSyxDQUMxQyxJQUFNNkUsRUFBWTdFLEVBQUMsR0FBQW9DLFVBQUFGLFFBQURsQyxPQUFDc0MsRUFBQUYsVUFBRHBDLEdBQ1o4RSxFQUFZOUUsRUFBSSxFQUFDLEdBQUFvQyxVQUFBRixRQUFMbEMsRUFBSSxPQUFDc0MsRUFBQUYsVUFBTHBDLEVBQUksR0FFdEJtQyxFQUFJb0MsS0FDRixDQUNFNUIsRUFBRyxJQUFPa0MsRUFBR2xDLEVBQUksSUFBT21DLEVBQUduQyxFQUMzQkMsRUFBRyxJQUFPaUMsRUFBR2pDLEVBQUksSUFBT2tDLEVBQUdsQyxFQUMzQkksRUFBVSxJQUFQNkIsRUFBRzdCLEVBQWtCLElBQVA4QixFQUFHOUIsR0FFdEIsQ0FDRUwsRUFBRyxJQUFPa0MsRUFBR2xDLEVBQUksSUFBT21DLEVBQUduQyxFQUMzQkMsRUFBRyxJQUFPaUMsRUFBR2pDLEVBQUksSUFBT2tDLEVBQUdsQyxFQUMzQkksRUFBVSxJQUFQNkIsRUFBRzdCLEVBQWtCLElBQVA4QixFQUFHOUIsSUFJdEJaLFVBQU9GLE9BQVMsR0FDbEJDLEVBQUlvQyxLQUFJSyxFQUFDLElBQURELEVBQWF2QyxVQUFPRixPQUFTLEdBQUMsR0FBQUUsVUFBQUYsUUFBQXlDLE9BQUFyQyxFQUFBRixVQUFBdUMsS0FFeEMsT0FBT3hDLEVBR0gsU0FBVTRDLEVBQU9sQixHQUVyQixJQUYrQyxJQUFUbUIsRUFBSzVDLFVBQUFGLE9BQUEsUUFBQUksSUFBQUYsVUFBQSxHQUFBQSxVQUFBLEdBQUcsRUFDMUNELEVBQU0wQixFQUNEb0IsRUFBUSxFQUFHQSxFQUFRRCxFQUFPQyxHQUFTLEVBQzFDOUMsRUFBTXVDLEVBQVVRLFdBQUMsRUFBREMsRUFBSWhELElBRXRCLE9BQU9BLEUsa0dDdENILFNBQVVpRCxFQUNkQyxFQUNBQyxHQUVBLElBQU1DLEVBQVNGLEVBQUdHLGVBRWxCLElBQUtELEVBQ0gsTUFBTSxJQUFJRSxNQUFNLDBCQUVsQixJQUFNM0QsRUFBSXVELEVBQUdLLGlCQUdiLE9BRkE1RCxFQUFFYSxFQUFJMkMsRUFBTTNDLEVBQ1piLEVBQUVjLEVBQUkwQyxFQUFNMUMsRUFDTGQsRUFBRTZELGdCQUFnQkosRUFBT0ssVyw2ekVDWlEsSUFHcENDLEVBQWMsV0FVakIsTyxFQUZELFNBQUFBLEVBQW1CUixJLDRGQUFpQlMsQ0FBQSxLQUFBRCxHQU43QixLQUFBRSxXQUFZLEVBQ1osS0FBQWxDLE9BQXVDLEdBRXZDLEtBQUFtQyxNQUFRLEdBSWJDLEtBQUtaLEdBQUtBLEksRUFDWCxFQUFBOUQsSUFBQSxnQkFBQU4sTUFDRCxTQUFjaUYsR0FDWkEsRUFBRUMsaUJBQ0ZGLEtBQUtGLFdBQVksRUFDakJFLEtBQUtwQyxPQUFTLEdBQ2QsSUFBTXVDLEVBQVNDLFNBQVNDLGdCQUN0Qiw2QkFDQSxRQUVGTCxLQUFLWixHQUFHa0IsWUFBWUgsR0FDcEJILEtBQUtHLE9BQVNBLElBQ2YsQ0FBQTdFLElBQUEsYUFBQVYsSUFDRCxXQUNFLElBQUtvRixLQUFLRyxPQUNSLE1BQU0sSUFBSVgsTUFBTSxxQkFFbEIsT0FBT1EsS0FBS0csU0FDYixDQUFBN0UsSUFBQSxnQkFBQU4sTUFDRCxTQUFjaUYsR0FBZSxJQUFBTSxFQUFBLEtBQzNCLEdBQUtQLEtBQUtGLFlBR1ZHLEVBQUVDLG1CQUNFRixLQUFLUSxjQUFnQkMsS0FBS0MsTUFBUVYsS0FBS1EsYUFBZSxJQUExRCxDQUdBUixLQUFLUSxhQUFlQyxLQUFLQyxNQUN6QixJQUFBQyxFQUFpQkMsT0FBMEJ6QixlQUFlYSxLQUFLWixHQUFJYSxHQUU3RHBFLEVBQVcsQ0FBRWEsRUFGVmlFLEVBQURqRSxFQUVjQyxFQUZWZ0UsRUFBRGhFLEVBRWNJLEVBRGZrRCxFQUFFWSxTQUFXYixLQUFLRCxPQUV0QmUsRUFBWWQsS0FBS3BDLE9BQU9LLE9BQU8sR0FBRyxHQUV0QzZDLEdBQ0FGLFVBQTZCM0UsT0FBTzZFLEVBQVdqRixHQUFLbUUsS0FBS0QsUUFJM0RDLEtBQUtwQyxPQUFPVSxLQUFLekMsR0FDSyxVQUFsQm9FLEVBQUVjLGNBQ0pmLEtBQUtwQyxPQUFTb0MsS0FBS3BDLE9BQU9vRCxLQUFJLFNBQUNoRixFQUFHakMsRUFBR2tILEdBQUssT0FBQXRDLElBQUEsR0FDckMzQyxHQUFDLElBQ0plLEVBQUd3RCxFQUFLUixPQUFTaEcsRUFBSWtILEVBQU1oRixjQUcvQitELEtBQUtrQixhQUNOLENBQUE1RixJQUFBLGNBQUFOLE1BQ0QsU0FBWWlGLEdBQ1ZBLEVBQUVDLGlCQUNGRixLQUFLRixXQUFZLFNBQ1ZFLEtBQUtHLFNBQ2IsQ0FBQTdFLElBQUEsVUFBQU4sTUFDRCxXQUNFZ0YsS0FBS1osR0FBRytCLGlCQUFpQixjQUFlbkIsS0FBS29CLGNBQWM3RixLQUFLeUUsT0FDaEVBLEtBQUtaLEdBQUcrQixpQkFBaUIsY0FBZW5CLEtBQUtxQixjQUFjOUYsS0FBS3lFLE9BQ2hFQSxLQUFLWixHQUFHK0IsaUJBQWlCLFlBQWFuQixLQUFLc0IsWUFBWS9GLEtBQUt5RSxTQUM3RCxDQUFBMUUsSUFBQSxTQUFBTixNQUNELFdBQ0UsSUFBUVgsRUFBTXVHLFVBQTRCM0IsTUFBNUIyQixFQUFvQjFCLEVBQzdCMEIsU0FBNEJaLEtBQUtwQyxPQUFRLEtBRHRDdkQsRUFHUjJGLEtBQUt1QixXQUFXQyxhQUFhLElBQUtuSCxRLDBGQXRFbEIsSUEwRXBCLFdBQ0UsSUFBTStFLEVBQUtnQixTQUFTcUIsY0FBYyxjQUNsQyxLQUFNckMsYUFBY3NDLGVBQ2xCLE1BQU1sQyxNQUFNLDBCQUVkLElBQUlJLEVBQWVSLEdBQUl1QyxVQUN2QnZDLEVBQUcrQixpQkFBaUIsZUFBZSxTQUFBbEIsR0FDakMsSUFBTWIsRUFBS2dCLFNBQVNxQixjQUFjLGFBQzdCckMsSUFHTEEsRUFBR3dDLFlBQWMzQixFQUFFWSxTQUFTZ0IsZUFFOUJ6QyxFQUFHK0IsaUJBQWlCLGVBQWUsU0FBQWxCLEdBQ2pDLElBQU1iLEVBQUtnQixTQUFTcUIsY0FBYyxpQkFDN0JyQyxJQUdMQSxFQUFHd0MsWUFBYzNCLEVBQUVjLGdCQWxCdkIiLCJmaWxlIjoiaW5kZXguYTQwYmNhNDViNmJhZWU4MWMxMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNyk7XG4iLCJpbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0ICogYXMgdmVjdG9yMiBmcm9tICcuL3ZlY3RvcjInO1xuZXhwb3J0ICogZnJvbSAnLi9jb21wdXRlJztcbmV4cG9ydCAqIGZyb20gJy4vdHlwZXMnO1xuZXhwb3J0IHsgdXRpbCwgdmVjdG9yMiB9O1xuZXhwb3J0ICogZnJvbSAnLi9zbW9vdGgnO1xuIiwiLyoqIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80MzU1MDI2OCAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlZmluZUZsb2F0KHY6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiB2ICsgOCAtIDg7XG59XG4iLCJpbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG4vKiogTGVuZ3RoIGJldHdlZW4gcG9pbnRzICovXG5leHBvcnQgZnVuY3Rpb24gbGVuZ3RoKC4uLnBvaW50czogVmVjdG9yMltdKTogbnVtYmVyIHtcbiAgbGV0IHJldCA9IDA7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgcGEgPSBwb2ludHNbaSAtIDFdO1xuICAgIGNvbnN0IHBiID0gcG9pbnRzW2ldO1xuICAgIHJldCArPSBNYXRoLnNxcnQoTWF0aC5wb3cocGEueCAtIHBiLngsIDIpICsgTWF0aC5wb3cocGEueSAtIHBiLnksIDIpKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiaW1wb3J0IHsgUG9pbnQsIFZlY3RvcjIgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IHJlZmluZUZsb2F0IH0gZnJvbSAnLi91dGlscy9yZWZpbmVGbG9hdCc7XG5pbXBvcnQgKiBhcyB2ZWN0b3IyIGZyb20gJy4vdmVjdG9yMic7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlU2lkZVBvaW50cyhcbiAgY3VycmVudDogUG9pbnQsXG4gIHByZXY/OiBQb2ludFxuKTogeyBsZWZ0OiBWZWN0b3IyOyByaWdodDogVmVjdG9yMiB9IHtcbiAgY29uc3QgciA9IGN1cnJlbnQudyAvIDI7XG4gIGlmICghcHJldikge1xuICAgIHJldHVybiB7XG4gICAgICBsZWZ0OiB7XG4gICAgICAgIHg6IGN1cnJlbnQueCxcbiAgICAgICAgeTogY3VycmVudC55ICsgcixcbiAgICAgIH0sXG4gICAgICByaWdodDoge1xuICAgICAgICB4OiBjdXJyZW50LngsXG4gICAgICAgIHk6IGN1cnJlbnQueSAtIHIsXG4gICAgICB9LFxuICAgIH07XG4gIH1cbiAgY29uc3QgYW5nbGUgPSBNYXRoLmF0YW4oKGN1cnJlbnQueSAtIHByZXYueSkgLyAoY3VycmVudC54IC0gcHJldi54KSk7XG4gIGNvbnN0IGR4ID0gcmVmaW5lRmxvYXQoTWF0aC5zaW4oYW5nbGUpICogcik7XG4gIGNvbnN0IGR5ID0gcmVmaW5lRmxvYXQoTWF0aC5jb3MoYW5nbGUpICogcik7XG4gIHJldHVybiB7XG4gICAgbGVmdDoge1xuICAgICAgeDogY3VycmVudC54IC0gZHgsXG4gICAgICB5OiBjdXJyZW50LnkgKyBkeSxcbiAgICB9LFxuICAgIHJpZ2h0OiB7XG4gICAgICB4OiBjdXJyZW50LnggKyBkeCxcbiAgICAgIHk6IGN1cnJlbnQueSAtIGR5LFxuICAgIH0sXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlKC4uLnBvaW50czogUG9pbnRbXSk6IHsgZDogc3RyaW5nIH0ge1xuICBjb25zdCBvcGVyYXRpb25zOiBzdHJpbmdbXSA9IFsnTSddO1xuICBjb25zdCBlZGdlUG9pbnRzOiBWZWN0b3IyW10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCB7IGxlZnQsIHJpZ2h0IH0gPSBjb21wdXRlU2lkZVBvaW50cyhcbiAgICAgIHBvaW50c1tpXSxcbiAgICAgIHBvaW50c1tpIC0gMV0gfHwgcG9pbnRzW2kgKyAxXVxuICAgICk7XG4gICAgY29uc3QgbGFzdExlZnQgPSBlZGdlUG9pbnRzLnNsaWNlKGkpWzBdO1xuICAgIGlmIChcbiAgICAgIGxhc3RMZWZ0ICYmXG4gICAgICB2ZWN0b3IyLmxlbmd0aChsYXN0TGVmdCwgbGVmdCkgPiB2ZWN0b3IyLmxlbmd0aChsYXN0TGVmdCwgcmlnaHQpXG4gICAgKSB7XG4gICAgICBlZGdlUG9pbnRzLnNwbGljZShpLCAwLCBsZWZ0LCByaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVkZ2VQb2ludHMuc3BsaWNlKGksIDAsIHJpZ2h0LCBsZWZ0KTtcbiAgICB9XG4gIH1cbiAgZm9yIChjb25zdCBwIG9mIGVkZ2VQb2ludHMpIHtcbiAgICBvcGVyYXRpb25zLnB1c2goYCR7cC54fSwke3AueX1gKTtcbiAgfVxuICBjb25zdCBkID0gb3BlcmF0aW9ucy5qb2luKCcgJyk7XG4gIHJldHVybiB7IGQgfTtcbn1cbiIsImltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi90eXBlcyc7XG5cbi8vIFJlZmVyOiBodHRwczovL2dpdGh1Yi5jb20vSmFtMy9jaGFpa2luLXNtb290aC9ibG9iL21hc3Rlci9pbmRleC5qc1xuXG5leHBvcnQgZnVuY3Rpb24gc21vb3RoT25jZSguLi5wb2ludHM6IFBvaW50W10pOiBQb2ludFtdIHtcbiAgY29uc3QgcmV0OiBQb2ludFtdID0gW107XG4gIGlmIChwb2ludHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldC5wdXNoKHsgLi4ucG9pbnRzWzBdIH0pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBjb25zdCBwMCA9IHBvaW50c1tpXTtcbiAgICBjb25zdCBwMSA9IHBvaW50c1tpICsgMV07XG5cbiAgICByZXQucHVzaChcbiAgICAgIHtcbiAgICAgICAgeDogMC43NSAqIHAwLnggKyAwLjI1ICogcDEueCxcbiAgICAgICAgeTogMC43NSAqIHAwLnkgKyAwLjI1ICogcDEueSxcbiAgICAgICAgdzogcDAudyAqIDAuNzUgKyBwMS53ICogMC4yNSxcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHg6IDAuMjUgKiBwMC54ICsgMC43NSAqIHAxLngsXG4gICAgICAgIHk6IDAuMjUgKiBwMC55ICsgMC43NSAqIHAxLnksXG4gICAgICAgIHc6IHAwLncgKiAwLjI1ICsgcDEudyAqIDAuNzUsXG4gICAgICB9XG4gICAgKTtcbiAgfVxuICBpZiAocG9pbnRzLmxlbmd0aCA+IDIpIHtcbiAgICByZXQucHVzaCh7IC4uLnBvaW50c1twb2ludHMubGVuZ3RoIC0gMV0gfSk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNtb290aChwb2ludHM6IFBvaW50W10sIHRpbWVzID0gMSk6IFBvaW50W10ge1xuICBsZXQgcmV0ID0gcG9pbnRzO1xuICBmb3IgKGxldCBjb3VudCA9IDA7IGNvdW50IDwgdGltZXM7IGNvdW50ICs9IDEpIHtcbiAgICByZXQgPSBzbW9vdGhPbmNlKC4uLnJldCk7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiB0cmFuc2xhdGVQb2ludChcbiAgZWw6IFNWR1NWR0VsZW1lbnQsXG4gIHBvaW50OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH1cbik6IERPTVBvaW50IHtcbiAgY29uc3QgbWF0cml4ID0gZWwuZ2V0U2NyZWVuQ1RNKCk7XG5cbiAgaWYgKCFtYXRyaXgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nob3VsZCBoYXMgc2NyZWVuIENUTS4nKTtcbiAgfVxuICBjb25zdCBwID0gZWwuY3JlYXRlU1ZHUG9pbnQoKTtcbiAgcC54ID0gcG9pbnQueDtcbiAgcC55ID0gcG9pbnQueTtcbiAgcmV0dXJuIHAubWF0cml4VHJhbnNmb3JtKG1hdHJpeC5pbnZlcnNlKCkpO1xufVxuIiwiaW1wb3J0ICogYXMgc3ZnVmFyaWFibGVXaWR0aExpbmUgZnJvbSAnQCc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJ0AnO1xuXG5jbGFzcyBEcmF3aW5nSGFuZGxlciB7XG4gIHB1YmxpYyBlbDogU1ZHU1ZHRWxlbWVudDtcbiAgcHVibGljIGlzRHJhd2luZyA9IGZhbHNlO1xuICBwdWJsaWMgcG9pbnRzOiBzdmdWYXJpYWJsZVdpZHRoTGluZS5Qb2ludFtdID0gW107XG4gIHB1YmxpYyB0YXJnZXQ/OiBTVkdQYXRoRWxlbWVudDtcbiAgcHVibGljIHdpZHRoID0gMjA7XG4gIHB1YmxpYyBsYXN0RHJhd1RpbWU/OiBudW1iZXI7XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKGVsOiBTVkdTVkdFbGVtZW50KSB7XG4gICAgdGhpcy5lbCA9IGVsO1xuICB9XG4gIG9uUG9pbnRlcmRvd24oZTogUG9pbnRlckV2ZW50KTogdm9pZCB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHRoaXMuaXNEcmF3aW5nID0gdHJ1ZTtcbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgIGNvbnN0IHRhcmdldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gICAgICAncGF0aCdcbiAgICApO1xuICAgIHRoaXMuZWwuYXBwZW5kQ2hpbGQodGFyZ2V0KTtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgfVxuICBnZXQgbXVzdFRhcmdldCgpOiBTVkdQYXRoRWxlbWVudCB7XG4gICAgaWYgKCF0aGlzLnRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTaG91bGQgaGFzIHRhcmdldCcpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy50YXJnZXQ7XG4gIH1cbiAgb25Qb2ludGVybW92ZShlOiBQb2ludGVyRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaXNEcmF3aW5nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAodGhpcy5sYXN0RHJhd1RpbWUgJiYgRGF0ZS5ub3coKSAtIHRoaXMubGFzdERyYXdUaW1lIDwgNCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmxhc3REcmF3VGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgeyB4LCB5IH0gPSBzdmdWYXJpYWJsZVdpZHRoTGluZS51dGlsLnRyYW5zbGF0ZVBvaW50KHRoaXMuZWwsIGUpO1xuICAgIGNvbnN0IHcgPSBlLnByZXNzdXJlICogdGhpcy53aWR0aDtcbiAgICBjb25zdCBwOiBQb2ludCA9IHsgeCwgeSwgdyB9O1xuICAgIGNvbnN0IGxhc3RQb2ludCA9IHRoaXMucG9pbnRzLnNsaWNlKC0xKVswXTtcbiAgICBpZiAoXG4gICAgICBsYXN0UG9pbnQgJiZcbiAgICAgIHN2Z1ZhcmlhYmxlV2lkdGhMaW5lLnZlY3RvcjIubGVuZ3RoKGxhc3RQb2ludCwgcCkgPCB0aGlzLndpZHRoXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucG9pbnRzLnB1c2gocCk7XG4gICAgaWYgKGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHtcbiAgICAgIHRoaXMucG9pbnRzID0gdGhpcy5wb2ludHMubWFwKCh2LCBpLCBhcnJheSkgPT4gKHtcbiAgICAgICAgLi4udixcbiAgICAgICAgdzogdGhpcy53aWR0aCAqIChpIC8gYXJyYXkubGVuZ3RoKSxcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuICBvblBvaW50ZXJ1cChlOiBQb2ludGVyRXZlbnQpOiB2b2lkIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5pc0RyYXdpbmcgPSBmYWxzZTtcbiAgICBkZWxldGUgdGhpcy50YXJnZXQ7XG4gIH1cbiAgaW5zdGFsbCgpOiB2b2lkIHtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgdGhpcy5vblBvaW50ZXJkb3duLmJpbmQodGhpcykpO1xuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCB0aGlzLm9uUG9pbnRlcm1vdmUuYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLm9uUG9pbnRlcnVwLmJpbmQodGhpcykpO1xuICB9XG4gIHVwZGF0ZSgpOiB2b2lkIHtcbiAgICBjb25zdCB7IGQgfSA9IHN2Z1ZhcmlhYmxlV2lkdGhMaW5lLmNvbXB1dGUoXG4gICAgICAuLi5zdmdWYXJpYWJsZVdpZHRoTGluZS5zbW9vdGgodGhpcy5wb2ludHMsIDQpXG4gICAgKTtcbiAgICB0aGlzLm11c3RUYXJnZXQuc2V0QXR0cmlidXRlKCdkJywgZCk7XG4gIH1cbn1cblxuKCgpOiB2b2lkID0+IHtcbiAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdzdmcjY2FudmFzJyk7XG4gIGlmICghKGVsIGluc3RhbmNlb2YgU1ZHU1ZHRWxlbWVudCkpIHtcbiAgICB0aHJvdyBFcnJvcignTWlzc2luZyBjYW52YXMgZWxlbWVudCcpO1xuICB9XG4gIG5ldyBEcmF3aW5nSGFuZGxlcihlbCkuaW5zdGFsbCgpO1xuICBlbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIGUgPT4ge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3ByZXNzdXJlJyk7XG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbC50ZXh0Q29udGVudCA9IGUucHJlc3N1cmUudG9TdHJpbmcoKTtcbiAgfSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgZSA9PiB7XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcG9pbnRlci10eXBlJyk7XG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbC50ZXh0Q29udGVudCA9IGUucG9pbnRlclR5cGU7XG4gIH0pO1xufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=