!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e,r){"use strict";r.r(e);var n=r(6);r.d(e,"util",(function(){return n}));var o=r(2);r.d(e,"vector2",(function(){return o}));var i=r(3);r.d(e,"computeSidePoints",(function(){return i.b})),r.d(e,"compute",(function(){return i.a}));var u=r(4);for(var a in u)["default","util","vector2","computeSidePoints","compute"].indexOf(a)<0&&function(t){r.d(e,t,(function(){return u[t]}))}(a);var c=r(5);r.d(e,"smoothOnce",(function(){return c.b})),r.d(e,"smooth",(function(){return c.a}))},function(t,e,r){"use strict";function n(t){return t+8-8}r.d(e,"a",(function(){return n}))},function(t,e,r){"use strict";function n(){for(var t=0,e=1;e<arguments.length;e+=1){var r=e-1<0||arguments.length<=e-1?void 0:arguments[e-1],n=e<0||arguments.length<=e?void 0:arguments[e];t+=Math.sqrt(Math.pow(r.x-n.x,2)+Math.pow(r.y-n.y,2))}return t}r.r(e),r.d(e,"length",(function(){return n}))},function(t,e,r){"use strict";r.d(e,"b",(function(){return i})),r.d(e,"a",(function(){return u}));var n=r(1),o=r(2);function i(t,e){var r=t.w/2;if(!e)return{left:{x:t.x,y:t.y+r},right:{x:t.x,y:t.y-r}};var o=Math.atan((t.y-e.y)/(t.x-e.x)),i=Object(n.a)(Math.sin(o)*r),u=Object(n.a)(Math.cos(o)*r);return{left:{x:t.x-i,y:t.y+u},right:{x:t.x+i,y:t.y-u}}}function u(){for(var t=["M"],e=[],r=arguments.length,n=new Array(r),u=0;u<r;u++)n[u]=arguments[u];for(var a=0;a<n.length;a+=1){var c=i(n[a],n[a-1]||n[a+1]),s=c.left,f=c.right,l=e.slice(a)[0];l&&o.length(l,s)>o.length(l,f)?e.splice(a,0,s,f):e.splice(a,0,f,s)}for(var p=0,h=e;p<h.length;p++){var y=h[p];t.push("".concat(y.x,",").concat(y.y))}var d=t.join(" ");return{d:d}}},function(t,e){},function(t,e,r){"use strict";function n(t){return function(t){if(Array.isArray(t))return o(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return o(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return o(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function u(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function c(){var t,e=[];if(0===arguments.length)return[];e.push(u({},arguments.length<=0?void 0:arguments[0]));for(var r=0;r<arguments.length-1;r++){var n=r<0||arguments.length<=r?void 0:arguments[r],o=r+1<0||arguments.length<=r+1?void 0:arguments[r+1];e.push({x:.75*n.x+.25*o.x,y:.75*n.y+.25*o.y,w:.75*n.w+.25*o.w},{x:.25*n.x+.75*o.x,y:.25*n.y+.75*o.y,w:.25*n.w+.75*o.w})}arguments.length>2&&e.push(u({},(t=arguments.length-1)<0||arguments.length<=t?void 0:arguments[t]));return e}function s(t){for(var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=t,o=0;o<e;o+=1)r=c.apply(void 0,n(r));return r}r.d(e,"b",(function(){return c})),r.d(e,"a",(function(){return s}))},function(t,e,r){"use strict";function n(t,e){var r=t.getScreenCTM();if(!r)throw new Error("Should has screen CTM.");var n=t.createSVGPoint();return n.x=e.x,n.y=e.y,n.matrixTransform(r.inverse())}r.r(e),r.d(e,"translatePoint",(function(){return n})),r.d(e,"refineFloat",(function(){return o.a}));var o=r(1)},function(t,e,r){t.exports=r(8)},function(t,e,r){"use strict";r.r(e);var n=r(0);function o(t){return function(t){if(Array.isArray(t))return i(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function u(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?u(Object(r),!0).forEach((function(e){c(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function c(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var f=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.isDrawing=!1,this.points=[],this.width=20,this.el=e}var e,r,i;return e=t,(r=[{key:"onPointerdown",value:function(t){t.preventDefault(),this.isDrawing=!0,this.points=[];var e=document.createElementNS("http://www.w3.org/2000/svg","path");this.el.appendChild(e),this.target=e}},{key:"mustTarget",get:function(){if(!this.target)throw new Error("Should has target");return this.target}},{key:"onPointermove",value:function(t){var e=this;if(this.isDrawing&&(t.preventDefault(),!(this.lastDrawTime&&Date.now()-this.lastDrawTime<4))){this.lastDrawTime=Date.now();var r=n.util.translatePoint(this.el,t),o={x:r.x,y:r.y,w:t.pressure*this.width},i=this.points.slice(-1)[0];i&&n.vector2.length(i,o)<this.width||(this.points.push(o),"mouse"===t.pointerType&&(this.points=this.points.map((function(t,r,n){return a(a({},t),{},{w:e.width*(r/n.length)})}))),this.update())}}},{key:"onPointerup",value:function(t){t.preventDefault(),this.isDrawing=!1,delete this.target}},{key:"install",value:function(){this.el.addEventListener("pointerdown",this.onPointerdown.bind(this)),this.el.addEventListener("pointermove",this.onPointermove.bind(this)),this.el.addEventListener("pointerup",this.onPointerup.bind(this))}},{key:"update",value:function(){var t=n.compute.apply(n,o(n.smooth(this.points,4))).d;this.mustTarget.setAttribute("d",t)}}])&&s(e.prototype,r),i&&s(e,i),Object.defineProperty(e,"prototype",{writable:!1}),t}();!function(){var t=document.querySelector("svg#canvas");if(!(t instanceof SVGSVGElement))throw Error("Missing canvas element");new f(t).install(),t.addEventListener("pointermove",(function(t){var e=document.querySelector("#pressure");e&&(e.textContent=t.pressure.toString())})),t.addEventListener("pointermove",(function(t){var e=document.querySelector("#pointer-type");e&&(e.textContent=t.pointerType)}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,