!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){t.exports=r(1)},function(t,e,r){"use strict";r.r(e);var n={};r.r(n),r.d(n,"translatePoint",(function(){return u})),r.d(n,"refineFloat",(function(){return a}));var o={};r.r(o),r.d(o,"length",(function(){return c}));var i={};function u(t,e){var r=t.getScreenCTM();if(!r)throw new Error("Should has screen CTM.");var n=t.createSVGPoint();return n.x=e.x,n.y=e.y,n.matrixTransform(r.inverse())}function a(t){return t+8-8}function c(){for(var t=0,e=1;e<arguments.length;e+=1){var r=e-1<0||arguments.length<=e-1?void 0:arguments[e-1],n=e<0||arguments.length<=e?void 0:arguments[e];t+=Math.sqrt(Math.pow(r.x-n.x,2)+Math.pow(r.y-n.y,2))}return t}function s(t,e){var r=t.w/2;if(!e)return{left:{x:t.x,y:t.y+r},right:{x:t.x,y:t.y-r}};var n=Math.atan((t.y-e.y)/(t.x-e.x)),o=a(Math.sin(n)*r),i=a(Math.cos(n)*r);return{left:{x:t.x-o,y:t.y+i},right:{x:t.x+o,y:t.y-i}}}function l(){for(var t=["M"],e=[],r=arguments.length,n=new Array(r),o=0;o<r;o++)n[o]=arguments[o];for(var i=0;i<n.length;i+=1){var u=s(n[i],n[i-1]||n[i+1]),a=u.left,l=u.right,f=e.slice(i)[0];f&&c(f,a)>c(f,l)?e.splice(i,0,a,l):e.splice(i,0,l,a)}for(var p=0,h=e;p<h.length;p++){var y=h[p];t.push("".concat(y.x,",").concat(y.y))}var v=t.join(" ");return{d:v}}function f(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function p(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function h(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?p(Object(r),!0).forEach((function(e){y(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function y(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function v(){var t,e=[];if(0===arguments.length)return[];e.push(h({},arguments.length<=0?void 0:arguments[0]));for(var r=0;r<arguments.length-1;r++){var n=r<0||arguments.length<=r?void 0:arguments[r],o=r+1<0||arguments.length<=r+1?void 0:arguments[r+1];e.push({x:.75*n.x+.25*o.x,y:.75*n.y+.25*o.y,w:.75*n.w+.25*o.w},{x:.25*n.x+.75*o.x,y:.25*n.y+.75*o.y,w:.25*n.w+.75*o.w})}arguments.length>2&&e.push(h({},(t=arguments.length-1)<0||arguments.length<=t?void 0:arguments[t]));return e}function d(t){for(var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=t,n=0;n<e;n+=1)r=v.apply(void 0,f(r));return r}function g(t){return function(t){if(Array.isArray(t)){for(var e=0,r=new Array(t.length);e<t.length;e++)r[e]=t[e];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function b(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function w(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function m(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}r.r(i),r.d(i,"computeSidePoints",(function(){return s})),r.d(i,"compute",(function(){return l})),r.d(i,"util",(function(){return n})),r.d(i,"vector2",(function(){return o})),r.d(i,"smoothOnce",(function(){return v})),r.d(i,"smooth",(function(){return d}));var O=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.isDrawing=!1,this.points=[],this.width=20,this.el=e}var e,r,u;return e=t,(r=[{key:"onPointerdown",value:function(t){t.preventDefault(),this.isDrawing=!0,this.points=[];var e=document.createElementNS("http://www.w3.org/2000/svg","path");this.el.appendChild(e),this.target=e}},{key:"onPointermove",value:function(t){var e=this;if(this.isDrawing&&(t.preventDefault(),!(this.lastDrawTime&&Date.now()-this.lastDrawTime<4))){this.lastDrawTime=Date.now();var r=n.translatePoint(this.el,t),i={x:r.x,y:r.y,w:t.pressure*this.width},u=this.points.slice(-1)[0];u&&o.length(u,i)<this.width||(this.points.push(i),"mouse"===t.pointerType&&(this.points=this.points.map((function(t,r,n){return function(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?b(Object(r),!0).forEach((function(e){w(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):b(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}({},t,{w:e.width*(r/n.length)})}))),this.update())}}},{key:"onPointerup",value:function(t){t.preventDefault(),this.isDrawing=!1,delete this.target}},{key:"install",value:function(){this.el.addEventListener("pointerdown",this.onPointerdown.bind(this)),this.el.addEventListener("pointermove",this.onPointermove.bind(this)),this.el.addEventListener("pointerup",this.onPointerup.bind(this))}},{key:"update",value:function(){var t=l.apply(i,g(d(this.points,4))).d;this.mustTarget.setAttribute("d",t)}},{key:"mustTarget",get:function(){if(!this.target)throw new Error("Should has target");return this.target}}])&&m(e.prototype,r),u&&m(e,u),t}();!function(){var t=document.querySelector("svg#canvas");if(!(t instanceof SVGSVGElement))throw Error("Missing canvas element");new O(t).install(),t.addEventListener("pointermove",(function(t){var e=document.querySelector("#pressure");e&&(e.textContent=t.pressure.toString())})),t.addEventListener("pointermove",(function(t){var e=document.querySelector("#pointer-type");e&&(e.textContent=t.pointerType)}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,