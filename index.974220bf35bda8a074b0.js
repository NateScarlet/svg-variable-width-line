!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e,r){"use strict";r.r(e);var n=r(6);r.d(e,"util",(function(){return n}));var o=r(2);r.d(e,"vector2",(function(){return o}));var i=r(3);r.d(e,"computeSidePoints",(function(){return i.b})),r.d(e,"compute",(function(){return i.a}));var u=r(4);for(var a in u)["default","util","vector2","computeSidePoints","compute"].indexOf(a)<0&&function(t){r.d(e,t,(function(){return u[t]}))}(a);var c=r(5);r.d(e,"smoothOnce",(function(){return c.b})),r.d(e,"smooth",(function(){return c.a}))},function(t,e,r){"use strict";function n(t){return t+8-8}r.d(e,"a",(function(){return n}))},function(t,e,r){"use strict";function n(){for(var t=0,e=1;e<arguments.length;e+=1){var r=e-1<0||arguments.length<=e-1?void 0:arguments[e-1],n=e<0||arguments.length<=e?void 0:arguments[e];t+=Math.sqrt(Math.pow(r.x-n.x,2)+Math.pow(r.y-n.y,2))}return t}r.r(e),r.d(e,"length",(function(){return n}))},function(t,e,r){"use strict";r.d(e,"b",(function(){return i})),r.d(e,"a",(function(){return u}));var n=r(1),o=r(2);function i(t,e){var r=t.w/2;if(!e)return{left:{x:t.x,y:t.y+r},right:{x:t.x,y:t.y-r}};var o=Math.atan((t.y-e.y)/(t.x-e.x)),i=Object(n.a)(Math.sin(o)*r),u=Object(n.a)(Math.cos(o)*r);return{left:{x:t.x-i,y:t.y+u},right:{x:t.x+i,y:t.y-u}}}function u(){for(var t=["M"],e=[],r=arguments.length,n=new Array(r),u=0;u<r;u++)n[u]=arguments[u];for(var a=0;a<n.length;a+=1){var c=i(n[a],n[a-1]||n[a+1]),f=c.left,l=c.right,s=e.slice(a)[0];s&&o.length(s,f)>o.length(s,l)?e.splice(a,0,f,l):e.splice(a,0,l,f)}for(var p=0,y=e;p<y.length;p++){var v=y[p];t.push("".concat(v.x,",").concat(v.y))}var h=t.join(" ");return{d:h}}},function(t,e){},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function o(t){return function(t){if(Array.isArray(t))return i(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return i(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return i(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function u(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function a(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?u(Object(r),!0).forEach((function(e){c(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):u(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function c(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==n(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,e||"default");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===n(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function f(){var t,e=[];if(0===arguments.length)return[];e.push(a({},arguments.length<=0?void 0:arguments[0]));for(var r=0;r<arguments.length-1;r++){var n=r<0||arguments.length<=r?void 0:arguments[r],o=r+1<0||arguments.length<=r+1?void 0:arguments[r+1];e.push({x:.75*n.x+.25*o.x,y:.75*n.y+.25*o.y,w:.75*n.w+.25*o.w},{x:.25*n.x+.75*o.x,y:.25*n.y+.75*o.y,w:.25*n.w+.75*o.w})}arguments.length>2&&e.push(a({},(t=arguments.length-1)<0||arguments.length<=t?void 0:arguments[t]));return e}function l(t){for(var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=t,n=0;n<e;n+=1)r=f.apply(void 0,o(r));return r}r.d(e,"b",(function(){return f})),r.d(e,"a",(function(){return l}))},function(t,e,r){"use strict";function n(t,e){var r=t.getScreenCTM();if(!r)throw new Error("Should has screen CTM.");var n=t.createSVGPoint();return n.x=e.x,n.y=e.y,n.matrixTransform(r.inverse())}r.r(e),r.d(e,"translatePoint",(function(){return n})),r.d(e,"refineFloat",(function(){return o.a}));var o=r(1)},function(t,e,r){t.exports=r(8)},function(t,e,r){"use strict";r.r(e);var n=r(0);function o(t){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t){return function(t){if(Array.isArray(t))return u(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return u(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);"Object"===r&&t.constructor&&(r=t.constructor.name);if("Map"===r||"Set"===r)return Array.from(t);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return u(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function u(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function c(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){f(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function f(t,e,r){return(e=s(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function l(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,s(n.key),n)}}function s(t){var e=function(t,e){if("object"!==o(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,e||"default");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===o(e)?e:String(e)}var p=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.isDrawing=!1,this.points=[],this.width=20,this.el=e}var e,r,o;return e=t,(r=[{key:"onPointerdown",value:function(t){t.preventDefault(),this.isDrawing=!0,this.points=[];var e=document.createElementNS("http://www.w3.org/2000/svg","path");this.el.appendChild(e),this.target=e}},{key:"mustTarget",get:function(){if(!this.target)throw new Error("Should has target");return this.target}},{key:"onPointermove",value:function(t){var e=this;if(this.isDrawing&&(t.preventDefault(),!(this.lastDrawTime&&Date.now()-this.lastDrawTime<4))){this.lastDrawTime=Date.now();var r=n.util.translatePoint(this.el,t),o={x:r.x,y:r.y,w:t.pressure*this.width},i=this.points.slice(-1)[0];i&&n.vector2.length(i,o)<this.width||(this.points.push(o),"mouse"===t.pointerType&&(this.points=this.points.map((function(t,r,n){return c(c({},t),{},{w:e.width*(r/n.length)})}))),this.update())}}},{key:"onPointerup",value:function(t){t.preventDefault(),this.isDrawing=!1,delete this.target}},{key:"install",value:function(){this.el.addEventListener("pointerdown",this.onPointerdown.bind(this)),this.el.addEventListener("pointermove",this.onPointermove.bind(this)),this.el.addEventListener("pointerup",this.onPointerup.bind(this))}},{key:"update",value:function(){var t=n.compute.apply(n,i(n.smooth(this.points,4))).d;this.mustTarget.setAttribute("d",t)}}])&&l(e.prototype,r),o&&l(e,o),Object.defineProperty(e,"prototype",{writable:!1}),t}();!function(){var t=document.querySelector("svg#canvas");if(!(t instanceof SVGSVGElement))throw Error("Missing canvas element");new p(t).install(),t.addEventListener("pointermove",(function(t){var e=document.querySelector("#pressure");e&&(e.textContent=t.pressure.toString())})),t.addEventListener("pointermove",(function(t){var e=document.querySelector("#pointer-type");e&&(e.textContent=t.pointerType)}))}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy91dGlscy9yZWZpbmVGbG9hdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmVjdG9yMi9sZW5ndGgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXB1dGUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Ntb290aC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvdHJhbnNsYXRlUG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vZGVtby9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJlZmluZUZsb2F0IiwidiIsImxlbmd0aCIsInJldCIsImFyZ3VtZW50cyIsInBhIiwidW5kZWZpbmVkIiwicGIiLCJNYXRoIiwic3FydCIsInBvdyIsIngiLCJ5IiwiY29tcHV0ZVNpZGVQb2ludHMiLCJjdXJyZW50IiwicHJldiIsInciLCJsZWZ0IiwicmlnaHQiLCJhbmdsZSIsImF0YW4iLCJkeCIsInNpbiIsImR5IiwiY29zIiwiY29tcHV0ZSIsIm9wZXJhdGlvbnMiLCJlZGdlUG9pbnRzIiwiX2xlbiIsInBvaW50cyIsIkFycmF5IiwiX2tleSIsIl9jb21wdXRlU2lkZVBvaW50cyIsImxhc3RMZWZ0Iiwic2xpY2UiLCJ2ZWN0b3IyIiwic3BsaWNlIiwiX2kiLCJfZWRnZVBvaW50cyIsInB1c2giLCJjb25jYXQiLCJqb2luIiwic21vb3RoT25jZSIsIl9yZWYiLCJfb2JqZWN0U3ByZWFkIiwicDAiLCJwMSIsInNtb290aCIsInRpbWVzIiwiY291bnQiLCJhcHBseSIsIl90b0NvbnN1bWFibGVBcnJheSIsInRyYW5zbGF0ZVBvaW50IiwiZWwiLCJwb2ludCIsIm1hdHJpeCIsImdldFNjcmVlbkNUTSIsIkVycm9yIiwiY3JlYXRlU1ZHUG9pbnQiLCJtYXRyaXhUcmFuc2Zvcm0iLCJpbnZlcnNlIiwiRHJhd2luZ0hhbmRsZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJpc0RyYXdpbmciLCJ3aWR0aCIsInRoaXMiLCJlIiwicHJldmVudERlZmF1bHQiLCJ0YXJnZXQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImFwcGVuZENoaWxkIiwiX3RoaXMiLCJsYXN0RHJhd1RpbWUiLCJEYXRlIiwibm93IiwiX3N2Z1ZhcmlhYmxlV2lkdGhMaW5lIiwic3ZnVmFyaWFibGVXaWR0aExpbmUiLCJwcmVzc3VyZSIsImxhc3RQb2ludCIsInBvaW50ZXJUeXBlIiwibWFwIiwiYXJyYXkiLCJ1cGRhdGUiLCJhZGRFdmVudExpc3RlbmVyIiwib25Qb2ludGVyZG93biIsIm9uUG9pbnRlcm1vdmUiLCJvblBvaW50ZXJ1cCIsIm11c3RUYXJnZXQiLCJzZXRBdHRyaWJ1dGUiLCJxdWVyeVNlbGVjdG9yIiwiU1ZHU1ZHRWxlbWVudCIsImluc3RhbGwiLCJ0ZXh0Q29udGVudCIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FB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QUd3QyxZQUFjM0IsRUFBRWMsZ0JBbEJ2QiIsImZpbGUiOiJpbmRleC45NzQyMjBiZjM1YmRhOGEwNzRiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA3KTtcbiIsImltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgKiBhcyB2ZWN0b3IyIGZyb20gJy4vdmVjdG9yMic7XG5leHBvcnQgKiBmcm9tICcuL2NvbXB1dGUnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcyc7XG5leHBvcnQgeyB1dGlsLCB2ZWN0b3IyIH07XG5leHBvcnQgKiBmcm9tICcuL3Ntb290aCc7XG4iLCIvKiogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQzNTUwMjY4ICovXG5leHBvcnQgZnVuY3Rpb24gcmVmaW5lRmxvYXQodjogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIHYgKyA4IC0gODtcbn1cbiIsImltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuLi90eXBlcyc7XG5cbi8qKiBMZW5ndGggYmV0d2VlbiBwb2ludHMgKi9cbmV4cG9ydCBmdW5jdGlvbiBsZW5ndGgoLi4ucG9pbnRzOiBWZWN0b3IyW10pOiBudW1iZXIge1xuICBsZXQgcmV0ID0gMDtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBwb2ludHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBwYSA9IHBvaW50c1tpIC0gMV07XG4gICAgY29uc3QgcGIgPSBwb2ludHNbaV07XG4gICAgcmV0ICs9IE1hdGguc3FydChNYXRoLnBvdyhwYS54IC0gcGIueCwgMikgKyBNYXRoLnBvdyhwYS55IC0gcGIueSwgMikpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJpbXBvcnQgeyBQb2ludCwgVmVjdG9yMiB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgcmVmaW5lRmxvYXQgfSBmcm9tICcuL3V0aWxzL3JlZmluZUZsb2F0JztcbmltcG9ydCAqIGFzIHZlY3RvcjIgZnJvbSAnLi92ZWN0b3IyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVTaWRlUG9pbnRzKFxuICBjdXJyZW50OiBQb2ludCxcbiAgcHJldj86IFBvaW50XG4pOiB7IGxlZnQ6IFZlY3RvcjI7IHJpZ2h0OiBWZWN0b3IyIH0ge1xuICBjb25zdCByID0gY3VycmVudC53IC8gMjtcbiAgaWYgKCFwcmV2KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IHtcbiAgICAgICAgeDogY3VycmVudC54LFxuICAgICAgICB5OiBjdXJyZW50LnkgKyByLFxuICAgICAgfSxcbiAgICAgIHJpZ2h0OiB7XG4gICAgICAgIHg6IGN1cnJlbnQueCxcbiAgICAgICAgeTogY3VycmVudC55IC0gcixcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxuICBjb25zdCBhbmdsZSA9IE1hdGguYXRhbigoY3VycmVudC55IC0gcHJldi55KSAvIChjdXJyZW50LnggLSBwcmV2LngpKTtcbiAgY29uc3QgZHggPSByZWZpbmVGbG9hdChNYXRoLnNpbihhbmdsZSkgKiByKTtcbiAgY29uc3QgZHkgPSByZWZpbmVGbG9hdChNYXRoLmNvcyhhbmdsZSkgKiByKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiB7XG4gICAgICB4OiBjdXJyZW50LnggLSBkeCxcbiAgICAgIHk6IGN1cnJlbnQueSArIGR5LFxuICAgIH0sXG4gICAgcmlnaHQ6IHtcbiAgICAgIHg6IGN1cnJlbnQueCArIGR4LFxuICAgICAgeTogY3VycmVudC55IC0gZHksXG4gICAgfSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGUoLi4ucG9pbnRzOiBQb2ludFtdKTogeyBkOiBzdHJpbmcgfSB7XG4gIGNvbnN0IG9wZXJhdGlvbnM6IHN0cmluZ1tdID0gWydNJ107XG4gIGNvbnN0IGVkZ2VQb2ludHM6IFZlY3RvcjJbXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHsgbGVmdCwgcmlnaHQgfSA9IGNvbXB1dGVTaWRlUG9pbnRzKFxuICAgICAgcG9pbnRzW2ldLFxuICAgICAgcG9pbnRzW2kgLSAxXSB8fCBwb2ludHNbaSArIDFdXG4gICAgKTtcbiAgICBjb25zdCBsYXN0TGVmdCA9IGVkZ2VQb2ludHMuc2xpY2UoaSlbMF07XG4gICAgaWYgKFxuICAgICAgbGFzdExlZnQgJiZcbiAgICAgIHZlY3RvcjIubGVuZ3RoKGxhc3RMZWZ0LCBsZWZ0KSA+IHZlY3RvcjIubGVuZ3RoKGxhc3RMZWZ0LCByaWdodClcbiAgICApIHtcbiAgICAgIGVkZ2VQb2ludHMuc3BsaWNlKGksIDAsIGxlZnQsIHJpZ2h0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWRnZVBvaW50cy5zcGxpY2UoaSwgMCwgcmlnaHQsIGxlZnQpO1xuICAgIH1cbiAgfVxuICBmb3IgKGNvbnN0IHAgb2YgZWRnZVBvaW50cykge1xuICAgIG9wZXJhdGlvbnMucHVzaChgJHtwLnh9LCR7cC55fWApO1xuICB9XG4gIGNvbnN0IGQgPSBvcGVyYXRpb25zLmpvaW4oJyAnKTtcbiAgcmV0dXJuIHsgZCB9O1xufVxuIiwiaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL3R5cGVzJztcblxuLy8gUmVmZXI6IGh0dHBzOi8vZ2l0aHViLmNvbS9KYW0zL2NoYWlraW4tc21vb3RoL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG5cbmV4cG9ydCBmdW5jdGlvbiBzbW9vdGhPbmNlKC4uLnBvaW50czogUG9pbnRbXSk6IFBvaW50W10ge1xuICBjb25zdCByZXQ6IFBvaW50W10gPSBbXTtcbiAgaWYgKHBvaW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgcmV0LnB1c2goeyAuLi5wb2ludHNbMF0gfSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGNvbnN0IHAwID0gcG9pbnRzW2ldO1xuICAgIGNvbnN0IHAxID0gcG9pbnRzW2kgKyAxXTtcblxuICAgIHJldC5wdXNoKFxuICAgICAge1xuICAgICAgICB4OiAwLjc1ICogcDAueCArIDAuMjUgKiBwMS54LFxuICAgICAgICB5OiAwLjc1ICogcDAueSArIDAuMjUgKiBwMS55LFxuICAgICAgICB3OiBwMC53ICogMC43NSArIHAxLncgKiAwLjI1LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgeDogMC4yNSAqIHAwLnggKyAwLjc1ICogcDEueCxcbiAgICAgICAgeTogMC4yNSAqIHAwLnkgKyAwLjc1ICogcDEueSxcbiAgICAgICAgdzogcDAudyAqIDAuMjUgKyBwMS53ICogMC43NSxcbiAgICAgIH1cbiAgICApO1xuICB9XG4gIGlmIChwb2ludHMubGVuZ3RoID4gMikge1xuICAgIHJldC5wdXNoKHsgLi4ucG9pbnRzW3BvaW50cy5sZW5ndGggLSAxXSB9KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc21vb3RoKHBvaW50czogUG9pbnRbXSwgdGltZXMgPSAxKTogUG9pbnRbXSB7XG4gIGxldCByZXQgPSBwb2ludHM7XG4gIGZvciAobGV0IGNvdW50ID0gMDsgY291bnQgPCB0aW1lczsgY291bnQgKz0gMSkge1xuICAgIHJldCA9IHNtb290aE9uY2UoLi4ucmV0KTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIHRyYW5zbGF0ZVBvaW50KFxuICBlbDogU1ZHU1ZHRWxlbWVudCxcbiAgcG9pbnQ6IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfVxuKTogRE9NUG9pbnQge1xuICBjb25zdCBtYXRyaXggPSBlbC5nZXRTY3JlZW5DVE0oKTtcblxuICBpZiAoIW1hdHJpeCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2hvdWxkIGhhcyBzY3JlZW4gQ1RNLicpO1xuICB9XG4gIGNvbnN0IHAgPSBlbC5jcmVhdGVTVkdQb2ludCgpO1xuICBwLnggPSBwb2ludC54O1xuICBwLnkgPSBwb2ludC55O1xuICByZXR1cm4gcC5tYXRyaXhUcmFuc2Zvcm0obWF0cml4LmludmVyc2UoKSk7XG59XG4iLCJpbXBvcnQgKiBhcyBzdmdWYXJpYWJsZVdpZHRoTGluZSBmcm9tICdAJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnQCc7XG5cbmNsYXNzIERyYXdpbmdIYW5kbGVyIHtcbiAgcHVibGljIGVsOiBTVkdTVkdFbGVtZW50O1xuICBwdWJsaWMgaXNEcmF3aW5nID0gZmFsc2U7XG4gIHB1YmxpYyBwb2ludHM6IHN2Z1ZhcmlhYmxlV2lkdGhMaW5lLlBvaW50W10gPSBbXTtcbiAgcHVibGljIHRhcmdldD86IFNWR1BhdGhFbGVtZW50O1xuICBwdWJsaWMgd2lkdGggPSAyMDtcbiAgcHVibGljIGxhc3REcmF3VGltZT86IG51bWJlcjtcblxuICBwdWJsaWMgY29uc3RydWN0b3IoZWw6IFNWR1NWR0VsZW1lbnQpIHtcbiAgICB0aGlzLmVsID0gZWw7XG4gIH1cbiAgb25Qb2ludGVyZG93bihlOiBQb2ludGVyRXZlbnQpOiB2b2lkIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdGhpcy5pc0RyYXdpbmcgPSB0cnVlO1xuICAgIHRoaXMucG9pbnRzID0gW107XG4gICAgY29uc3QgdGFyZ2V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFxuICAgICAgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICAgICdwYXRoJ1xuICAgICk7XG4gICAgdGhpcy5lbC5hcHBlbmRDaGlsZCh0YXJnZXQpO1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0O1xuICB9XG4gIGdldCBtdXN0VGFyZ2V0KCk6IFNWR1BhdGhFbGVtZW50IHtcbiAgICBpZiAoIXRoaXMudGFyZ2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nob3VsZCBoYXMgdGFyZ2V0Jyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnRhcmdldDtcbiAgfVxuICBvblBvaW50ZXJtb3ZlKGU6IFBvaW50ZXJFdmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5pc0RyYXdpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmICh0aGlzLmxhc3REcmF3VGltZSAmJiBEYXRlLm5vdygpIC0gdGhpcy5sYXN0RHJhd1RpbWUgPCA0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubGFzdERyYXdUaW1lID0gRGF0ZS5ub3coKTtcbiAgICBjb25zdCB7IHgsIHkgfSA9IHN2Z1ZhcmlhYmxlV2lkdGhMaW5lLnV0aWwudHJhbnNsYXRlUG9pbnQodGhpcy5lbCwgZSk7XG4gICAgY29uc3QgdyA9IGUucHJlc3N1cmUgKiB0aGlzLndpZHRoO1xuICAgIGNvbnN0IHA6IFBvaW50ID0geyB4LCB5LCB3IH07XG4gICAgY29uc3QgbGFzdFBvaW50ID0gdGhpcy5wb2ludHMuc2xpY2UoLTEpWzBdO1xuICAgIGlmIChcbiAgICAgIGxhc3RQb2ludCAmJlxuICAgICAgc3ZnVmFyaWFibGVXaWR0aExpbmUudmVjdG9yMi5sZW5ndGgobGFzdFBvaW50LCBwKSA8IHRoaXMud2lkdGhcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5wb2ludHMucHVzaChwKTtcbiAgICBpZiAoZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykge1xuICAgICAgdGhpcy5wb2ludHMgPSB0aGlzLnBvaW50cy5tYXAoKHYsIGksIGFycmF5KSA9PiAoe1xuICAgICAgICAuLi52LFxuICAgICAgICB3OiB0aGlzLndpZHRoICogKGkgLyBhcnJheS5sZW5ndGgpLFxuICAgICAgfSkpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG4gIG9uUG9pbnRlcnVwKGU6IFBvaW50ZXJFdmVudCk6IHZvaWQge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB0aGlzLmlzRHJhd2luZyA9IGZhbHNlO1xuICAgIGRlbGV0ZSB0aGlzLnRhcmdldDtcbiAgfVxuICBpbnN0YWxsKCk6IHZvaWQge1xuICAgIHRoaXMuZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCB0aGlzLm9uUG9pbnRlcmRvd24uYmluZCh0aGlzKSk7XG4gICAgdGhpcy5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIHRoaXMub25Qb2ludGVybW92ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIHRoaXMub25Qb2ludGVydXAuYmluZCh0aGlzKSk7XG4gIH1cbiAgdXBkYXRlKCk6IHZvaWQge1xuICAgIGNvbnN0IHsgZCB9ID0gc3ZnVmFyaWFibGVXaWR0aExpbmUuY29tcHV0ZShcbiAgICAgIC4uLnN2Z1ZhcmlhYmxlV2lkdGhMaW5lLnNtb290aCh0aGlzLnBvaW50cywgNClcbiAgICApO1xuICAgIHRoaXMubXVzdFRhcmdldC5zZXRBdHRyaWJ1dGUoJ2QnLCBkKTtcbiAgfVxufVxuXG4oKCk6IHZvaWQgPT4ge1xuICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N2ZyNjYW52YXMnKTtcbiAgaWYgKCEoZWwgaW5zdGFuY2VvZiBTVkdTVkdFbGVtZW50KSkge1xuICAgIHRocm93IEVycm9yKCdNaXNzaW5nIGNhbnZhcyBlbGVtZW50Jyk7XG4gIH1cbiAgbmV3IERyYXdpbmdIYW5kbGVyKGVsKS5pbnN0YWxsKCk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgZSA9PiB7XG4gICAgY29uc3QgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcHJlc3N1cmUnKTtcbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsLnRleHRDb250ZW50ID0gZS5wcmVzc3VyZS50b1N0cmluZygpO1xuICB9KTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBlID0+IHtcbiAgICBjb25zdCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwb2ludGVyLXR5cGUnKTtcbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsLnRleHRDb250ZW50ID0gZS5wb2ludGVyVHlwZTtcbiAgfSk7XG59KSgpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==