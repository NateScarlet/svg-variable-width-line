!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){t.exports=n(1)},function(t,e,n){"use strict";n.r(e);var r={};n.r(r),n.d(r,"translatePoint",function(){return a}),n.d(r,"refineFloat",function(){return u});var i={};n.r(i),n.d(i,"length",function(){return s});var o={};function a(t,e){var n=t.getScreenCTM();if(!n)throw new Error("Should has screen CTM.");var r=t.createSVGPoint();return r.x=e.x,r.y=e.y,r.matrixTransform(n.inverse())}function u(t){return t+8-8}function s(){for(var t=0,e=1;e<arguments.length;e+=1){var n=e-1<0||arguments.length<=e-1?void 0:arguments[e-1],r=e<0||arguments.length<=e?void 0:arguments[e];t+=Math.sqrt(Math.pow(n.x-r.x,2)+Math.pow(n.y-r.y,2))}return t}function c(t,e){var n=t.w/2;if(!e)return{left:{x:t.x,y:t.y+n},right:{x:t.x,y:t.y-n}};var r=Math.atan((t.y-e.y)/(t.x-e.x)),i=u(Math.sin(r)*n),o=u(Math.cos(r)*n);return{left:{x:t.x-i,y:t.y+o},right:{x:t.x+i,y:t.y-o}}}function l(){for(var t=["M"],e=[],n=0;n<arguments.length;n+=1){var r=c(n<0||arguments.length<=n?void 0:arguments[n],(n-1<0||arguments.length<=n-1?void 0:arguments[n-1])||(n+1<0||arguments.length<=n+1?void 0:arguments[n+1])),i=r.left,o=r.right,a=e.slice(n)[0];a&&s(a,i)>s(a,o)?e.splice(n,0,i,o):e.splice(n,0,o,i)}for(var u=0,l=e;u<l.length;u++){var f=l[u];t.push("".concat(f.x,",").concat(f.y))}return{d:t.join(" ")}}function f(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function h(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),n.push.apply(n,r)}return n}function p(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?h(n,!0).forEach(function(e){v(t,e,n[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):h(n).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))})}return t}function v(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function d(){var t,e=[];if(0===arguments.length)return[];e.push(p({},arguments.length<=0?void 0:arguments[0]));for(var n=0;n<arguments.length-1;n++){var r=n<0||arguments.length<=n?void 0:arguments[n],i=n+1<0||arguments.length<=n+1?void 0:arguments[n+1];e.push({x:.75*r.x+.25*i.x,y:.75*r.y+.25*i.y,w:.75*r.w+.25*i.w},{x:.25*r.x+.75*i.x,y:.25*r.y+.75*i.y,w:.25*r.w+.75*i.w})}arguments.length>2&&e.push(p({},(t=arguments.length-1)<0||arguments.length<=t?void 0:arguments[t]));return e}function y(t){for(var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=t,r=0;r<e;r+=1)n=d.apply(void 0,f(n));return n}function g(t){return function(t){if(Array.isArray(t)){for(var e=0,n=new Array(t.length);e<t.length;e++)n[e]=t[e];return n}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function w(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}n.r(o),n.d(o,"util",function(){return r}),n.d(o,"vector2",function(){return i}),n.d(o,"computeSidePoints",function(){return c}),n.d(o,"compute",function(){return l}),n.d(o,"smoothOnce",function(){return d}),n.d(o,"smooth",function(){return y});var b=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.isDrawing=!1,this.points=[],this.width=20,this.el=e}var e,n,a;return e=t,(n=[{key:"onPointerdown",value:function(t){t.preventDefault(),this.isDrawing=!0,this.points=[];var e=document.createElementNS("http://www.w3.org/2000/svg","path");this.el.appendChild(e),this.target=e}},{key:"onPointermove",value:function(t){if(this.isDrawing&&(t.preventDefault(),!(this.lastDrawTime&&Date.now()-this.lastDrawTime<4))){this.lastDrawTime=Date.now();var e=r.translatePoint(this.el,t),n={x:e.x,y:e.y,w:t.pressure*this.width},o=this.points.slice(-1)[0];o&&i.length(o,n)<this.width||(this.points.push(n),this.update())}}},{key:"onPointerup",value:function(t){t.preventDefault(),this.isDrawing=!1,delete this.target}},{key:"install",value:function(){this.el.addEventListener("pointerdown",this.onPointerdown.bind(this)),this.el.addEventListener("pointermove",this.onPointermove.bind(this)),this.el.addEventListener("pointerup",this.onPointerup.bind(this))}},{key:"update",value:function(){var t=l.apply(o,g(y(this.points,4))).d;this.mustTarget.setAttribute("d",t)}},{key:"mustTarget",get:function(){if(!this.target)throw new Error("Should has target");return this.target}}])&&w(e.prototype,n),a&&w(e,a),t}();!function(){var t=document.querySelector("svg#canvas");if(!(t instanceof SVGSVGElement))throw Error("Missing canvas element");new b(t).install(),t.addEventListener("pointermove",function(t){var e=document.querySelector("#pressure");e&&(e.textContent=t.pressure.toString())})}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,